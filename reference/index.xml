<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference on Qbec</title>
    <link>http://qbec.io/reference/</link>
    <description>Recent content in Reference on Qbec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://qbec.io/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Application YAML</title>
      <link>http://qbec.io/reference/qbec-yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/qbec-yaml/</guid>
      <description>The app configuration is a file called qbec.yaml and needs to be at the root of the directory tree.
apiVersion: qbec.io/v1alpha1 # only supported version currently kind: App # must always be &amp;quot;App&amp;quot; metadata: name: my-app # app name. Allows multiple qbec apps to deploy different objects to the same namespace without GC collisions spec: componentsDir: components # directory where component files can be found. Not recursive. default: components paramsFile: params.</description>
    </item>
    
    <item>
      <title>Metadata for K8s objects</title>
      <link>http://qbec.io/reference/gen-metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/gen-metadata/</guid>
      <description>Labels All Kubernetes objects produced by qbec have the following labels associated with them:
 qbec.io/application - the app name from qbec.yaml. qbec.io/environment - the environment name in qbec.yaml for which the object was created. qbec.io/tag - the --app-tag parameter passed in on the command line. This label is only set when non-blank.  The labels are used to efficiently find all cluster objects for a specific app and environment (and tag, if specified) for garbage collection.</description>
    </item>
    
    <item>
      <title>Jsonnet native functions</title>
      <link>http://qbec.io/reference/jsonnet-native-funcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/jsonnet-native-funcs/</guid>
      <description>A list of all native functions that qbec natively supports.
expandHelmTemplate The expandHelmTemplate function expands a helm chart and returns the resulting objects. This is EXPERIMENTAL in nature - the API is subject to change in a subsequent release. It runs the helm template command, assuming that the helm binary is already installed and available in the PATH.
Usage  expandHelmTemplate(&amp;quot;path/to/chart&amp;quot;, { chartProperty: &#39;chart-value&#39; }, { namespace: &#39;my-ns&#39;, name: &#39;my-name&#39;, thisFile: std.</description>
    </item>
    
    <item>
      <title>Component evaluation</title>
      <link>http://qbec.io/reference/component-evaluation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/component-evaluation/</guid>
      <description>How qbec evaluates component code using jsonnet and what it expects the output to look like.
Jsonnet evaluation This works as follows:
 Collect the list of files to be evaluated for the environment. This takes into account all components in the directory, inclusion and exclusion lists for the current environment and component filters specified on the command line. Assuming this leads to 3 files, say, c1.jsonnet, c2.json, and c3.</description>
    </item>
    
    <item>
      <title>Diffs and patches</title>
      <link>http://qbec.io/reference/diffs-and-patches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/diffs-and-patches/</guid>
      <description>qbec uses a 3-way merge patch similar to kubectl/ksonnet apply. The Kubernetes documentation describes how this works.
For existing objects, the qbec diff command produces a diff between the last applied configuration stored on the server and the current configuration of the object loaded from source. This diff is &amp;ldquo;clean&amp;rdquo; in the sense of the remote object not having additional fields, default values and so on. It faithfully represents the change between the previous and current version of the object produced from source code.</description>
    </item>
    
    <item>
      <title>Garbage collection</title>
      <link>http://qbec.io/reference/garbage-collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/garbage-collection/</guid>
      <description>While garbage collection is supported as a first-class operation qbec and enabled by default, it is a complex, nuanced subject fraught with special cases. We hope that the explanation below can help users figure out the causes of issues they might see in this area and create better bug reports.
What garbage collection means Garbage collection is the act of deleting objects that were once applied for a qbec app but no longer exist in source code.</description>
    </item>
    
  </channel>
</rss>